#Range Sum Query - Immutable (LeetCode)

class NumArray:

    def __init__(self, nums):
        self.n=len(nums)
        self.BIT=[0]*(self.n+1)
        self.nums=nums[:]

        for i in range(self.n):
            self.update(i+1,nums[i])
    def update(self,i:int,val:int):
        while i<=self.n:
            self.BIT[i]+=val
            i+=i&-i
    def prefix_sum(self,i:int)->int:
        self.res=0
        while i>0:
            self.res+=self.BIT[i]
            i-=i&-i
        return self.res
    def sumRange(self, left: int, right: int) -> int:
        return self.prefix_sum(right+1)-self.prefix_sum(left)


nums = [1, 2, 3, 4, 5]
obj = NumArray(nums)
param_1 = obj.sumRange(1, 3)
print("Sum from index 1 to 3:", param_1)