
#Longest Common Subsequence:
#Memorization:
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        x=len(text1)
        y=len(text2)
        self.t=[[-1 for _ in range(y+1)]for _ in range(x+1)]
        return self.LCS(text1,text2,x,y)
    def LCS(self,text1,text2,i,j):
        if(i==0 or j==0):
            return 0
        if self.t[i][j]!=-1:
            return self.t[i][j]
        if text1[i-1]==text2[j-1]:
            self.t[i][j]=1+self.LCS(text1,text2,i-1, j-1)
        else:
            self.t[i][j]=max(self.LCS(text1,text2,i-1,j), self.LCS(text1,text2,i,j-1))
        return self.t[i][j]
#Tabulation:
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        x=len(text1)
        y=len(text2)
        t=[[0 for _ in range(y+1)]for _ in range(x+1)]
        for i in range(1,x+1):
            for j in range(1,y+1):
                if text1[i-1]==text2[j-1]:
                    t[i][j]=1+t[i-1][j-1]
                else:
                    t[i][j]=max(t[i-1][j],t[i][j-1])
        return t[x][y]
