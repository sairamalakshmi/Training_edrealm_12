#Subset sum problem:
#recursion:
class Solution:
    def isSubsetSum (self, arr, sum):
        # code here
        n=len(arr)
        return self.solve(arr,n,sum)
       
    def solve(self,arr,n,sum):
        if sum==0:
            return True
        if n==0:
            return False
        if arr[n-1]<=sum:
            include=self.solve(arr,n-1,sum-arr[n-1])
            exclude=self.solve(arr,n-1,sum)
            return include or exclude
        else:
            exe=self.solve(arr,n-1,sum)
            return exe
       
#memorization:
class Solution:
    def isSubsetSum (self, arr, sum):
        # code here
        n=len(arr)
        self.t=[[-1 for _ in range(sum+1)]for _ in range(n+1)]
        return self.solve(arr,n,sum)
       
    def solve(self,arr,n,sum):
        if sum==0:
            return True
        if n==0:
            return False
        if self.t[n][sum]!=-1:
            return self.t[n][sum]
        if arr[n-1]<=sum:
            include=self.solve(arr,n-1,sum-arr[n-1])
            exclude=self.solve(arr,n-1,sum)
            self.t[n][sum]=include or exclude
        else:
            self.t[n][sum]=self.solve(arr,n-1,sum)
        return self.t[n][sum]
       
#tabulation:
class Solution:
    def isSubsetSum (self, arr, sum):
        # code here
        n=len(arr)
        t=[[False for _ in range(sum+1)]for _ in range(n+1)]
        for i in range(n+1):
            t[i][0]=True
        for i in range(1,n+1):
            for j in range(1,sum+1):
                if arr[i-1]<=j:
                    include=t[i-1][j-arr[i-1]]
                    exclude=t[i-1][j]
                    t[i][j]=include or exclude
                else:
                    t[i][j]=t[i-1][j]
        return t[n][sum]