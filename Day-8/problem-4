#Coin Change (Count Ways)
#memorization:
class Solution:
    def count(self, coins, sum):
        n=len(coins)
        self.t=[[-1 for i in range(sum+1)]for j in range(n+1)]
        return self.solve(coins,sum,n)
    def solve(self,coins,sum,n):
        if sum==0:
            return 1
        if n==0:
            return 0
        if self.t[n][sum] !=-1:
            return self.t[n][sum]
        if (coins[n-1]<=sum):
            include=self.solve(coins,sum-coins[n-1],n)
            exclude=self.solve(coins,sum,n-1)
            self.t[n][sum]=include+exclude
        else:
            self.t[n][sum]=self.solve(coins,sum,n-1)
        return self.t[n][sum]

#tabulation
class Solution:
    def count(self, coins, sum):
        n=len(coins)
        t=[[0 for i in range(sum+1)]for j in range(n+1)]
        for i in range(n+1):
            t[i][0]=1
        for i in range(1,n+1):
            for j in range(1,sum+1):
                if (coins[i-1]<=j):
                    include=t[i][j-coins[i-1]]
                    exclude=t[i-1][j]
                    t[i][j]=include+exclude
                else:
                    t[i][j]=t[i-1][j]
        return t[n][sum]