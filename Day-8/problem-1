#0-1 Knapsack Problem:
#recursion:
class Solution:
    def knapsack(self, W, val, wt):
        # code here
        n=len(val)
        return self.solve(val,wt,W,n)
    def solve(self,val,wt,W,n):
        if W==0 or n==0:
            return 0
        if (wt[n-1]<=W):
            include=val[n-1]+self.solve(val,wt,W-wt[n-1],n-1)
            exclude=self.solve(val,wt,W,n-1)
            return max(include,exclude)
        else:
            exe=self.solve(val,wt,W,n-1)
            return exe
#error:Time limit exceeded
#memorization:
class Solution:
    def knapsack(self, W, val, wt):
        # code here
        n=len(val)
        self.t=[[-1 for i in range(W+1)]for j in range(n+1)]
        return self.solve(val,wt,W,n)
    def solve(self,val,wt,W,n):
        if W==0 or n==0:
            return 0
        if self.t[n][W] !=-1:
            return self.t[n][W]
        if (wt[n-1]<=W):
            include=val[n-1]+self.solve(val,wt,W-wt[n-1],n-1)
            exclude=self.solve(val,wt,W,n-1)
            self.t[n][W]=max(include,exclude)
        else:
            self.t[n][W]=self.solve(val,wt,W,n-1)
        return self.t[n][W]

#tabulation:
class Solution:
    def knapsack(self, W, val, wt):
        # code here
        n=len(val)
        t=[[0 for _ in range(W+1)]for _ in range(n+1)]
        for i in range(1,n+1):
            for j in range(1,W+1):
                if wt[i-1]<=j:
                    include=val[i-1]+t[i-1][j-wt[i-1]]
                    exclude=t[i-1][j]
                    t[i][j]=max(include,exclude)
                else:
                    t[i][j]=t[i-1][j]
        return t[n][W]